import schedule
import time
from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, Message
from requests import get, Response
from json import loads
from googletrans import Translator, LANGCODES
from logging import basicConfig, getLogger, DEBUG


basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=DEBUG)
logger = getLogger(__name__)
TOKEN = '6058507940:AAEAb_bmD0lXXT_a742jKCXlHrYRfaGNsaI'
bot = TeleBot(TOKEN)
API_open_weather = 'c507bcf8971af71b550c3281cad1b275'
translator = Translator(service_urls=['translate.googleapis.com'])
PAYMENTS_TOKEN = '1744374395:TEST:ca18f36eb33dcabdd6c8'
langs_names = list(LANGCODES.keys())
menu_markup = ReplyKeyboardMarkup(resize_keyboard=True)
menu_markup.add(KeyboardButton('üèô –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞'), KeyboardButton('üó∫ –ü–æ–≥–æ–¥–∞ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏', request_location=True))
menu_markup.add(KeyboardButton('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏'), KeyboardButton('‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º'))
menu_markup.add(KeyboardButton('üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç'))
back_markup = ReplyKeyboardMarkup(resize_keyboard=True)
back_markup.add(KeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'))


def get_weather(message: Message, result: Response) -> None:
    if result.status_code == 200:
        data = loads(result.text)
        city = translator.translate(data['name'], src='en', dest='ru').text
        temp = data['main']['temp']
        real_temp = data['main']['feels_like']
        conditions = data['weather'][0]['description']
        pressure = data['main']['pressure']
        humidity = data['main']['humidity']
        wind = data['wind']['speed']
        bot.reply_to(message,
                     f'–°–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ {city}: \n'
                     f'üå°+{round(temp)} ¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ +{round(real_temp)} ¬∞C'
                     f'\n‚ÜóÔ∏è–í–µ—Ç–µ—Ä: {round(wind)} –º/—Å'
                     f'\nüå•–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: '
                     f'{conditions}'
                     f'\n‚è≤–î–∞–≤–ª–µ–Ω–∏–µ: {round(pressure/1.333)} –º–º. —Ä—Ç. —Å—Ç.'
                     f'\nüíß–í–ª–∞–∂–Ω–æ—Å—Ç—å: '
                     f'{humidity}%')
        if conditions == 'clear sky':
            sticker_id = 'CAACAgIAAxkBAAEKWV9lC2QKSuI1rAHW6qA-v9CBnw00iQACOzYAAjVQYUjAUz1pjKjxtjAE'
        elif conditions == 'light rain':
            sticker_id = 'CAACAgIAAxkBAAEKWS9lC1GI2grIW91nBQc7h4R2Iet8JwACPDcAAjTpUEiCyCmPfMIF2jAE'
        elif conditions == 'moderate rain':
            sticker_id = 'CAACAgIAAxkBAAEKWTxlC1PpXf-hn28iQriymSDihXzIsAAC90AAAqfUWUilawirv5bpLzAE'
        elif conditions == 'heavy intensity rain':
            sticker_id = 'CAACAgIAAxkBAAEKWS1lC1EWKMRvJ_pxkL3r3YZItnx28QACMzwAAtaTYEjjYaSA5JG9ZTAE'
        elif conditions in ['broken clouds', 'scattered clouds', 'overcast clouds', 'few clouds']:
            sticker_id = 'CAACAgIAAxkBAAEKWSZlC0iq2_M72eEYRmnqB_tQr92KgQACsjkAAkdbWEhyZFRbA_1pHzAE'
        elif conditions in ['mist', 'smoke']:
            sticker_id = 'CAACAgIAAxkBAAEKWFdlCvMgbEyu0ovY3RTLWljNlCQNsgACrTgAAq4lWUjCR7-2E9FdODAE'
        bot.send_sticker(message.chat.id, sticker_id, reply_markup=back_markup)
    else:
        bot.send_message(message.chat.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤–≤–µ–¥–∏ –µ—â–µ —Ä–∞–∑:')


@bot.message_handler(commands=['start'])
def start(message: Message) -> None:
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton('–î–∞'), KeyboardButton('–ù–µ—Ç'))
    username = ''
    if message.from_user.first_name:
        username += message.from_user.first_name
    if message.from_user.last_name:
        username += ' ' + message.from_user.last_name
    username = username.strip()
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç, {username}! –Ø —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç –¥–ª—è –≤—ã–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ.\n–ü—Ä–æ–¥–æ–ª–∂–∞—è '
                     f'–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Ç—ã –¥–∞–µ—à—å —Å–≤–æ–µ <a href="https://docs.google.com/document/d/'
                     f'1Y8jrM_0F6xaME0gTi3hUVM7O6FSjxAIFiSFuyHFIt2E/edit?usp=sharing">—Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É '
                     f'–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>', parse_mode='HTML')

    bot.send_message(message.chat.id, '–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–î–∞')
def accept(message):
    menu(message)


@bot.message_handler(func=lambda message: message.text == '–ù–µ—Ç')
def decline(message):
    bot.send_message(message.chat.id, '–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞'
                                      '\n–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ')
    start(message)

@bot.message_handler(commands=['menu'])
def menu(message: Message) -> None:
    bot.send_message(message.chat.id,
                     f'–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –º–µ–Ω—é!\n–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:', reply_markup=menu_markup)


@bot.message_handler(func=lambda message: message.text == 'üèô –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞')
def choose_city(message: Message) -> None:
    bot.send_message(message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: ', reply_markup=back_markup)


@bot.message_handler(func=lambda message: message.text == 'üá∫üá∏ –í—ã–±–æ—Ä —è–∑—ã–∫–∞')
def choose_lang(message: Message) -> None:
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'))
    buttons = [KeyboardButton(language) for language in langs_names]
    for button in buttons:
        markup.add(button)
    bot.send_message(message.chat.id, f'Please choose your language or write in English', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
def information(message: Message) -> None:
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'))
    bot.send_message(message.chat.id,
                     '–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –≥—Ä—É–ø–ø–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –†–æ—Å—Å–∏–∏, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –±–æ–ª–µ–µ —á–µ–º —Å–æ—Ç–Ω–µ —è–∑—ã–∫–æ–≤ –º–∏—Ä–∞.\n'
                     '–°–æ–∑–¥–∞–Ω –¥–ª—è –≤—ã–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≥–æ—Ä–æ–¥–∞—Ö\n'
                     '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n'
                     '–ù–∞–ø–∏—Å–∞–Ω –Ω–∞ —è–∑—ã–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Python c –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫:\n'
                     'telebot, json, requests, googletrans, logging.\n\n'
                     '–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:\n'
                     '<a href="https://t.me/tonnrryyy">–ú–µ—â–µ—Ä—è–∫–æ–≤ –î–∞–Ω–∏–∏–ª</a>\n'
                     '<a href="https://t.me/t_m_s_o_s_n">–ö–æ–≤–∞–ª–µ–Ω–∫–æ –ï–≤–≥–µ–Ω–∏–π</a>\n'
                     '<a href="https://t.me/yelotfn">–ì–µ–ª—å–º –î–∞–Ω–∏–∏–ª</a>\n', reply_markup=markup, parse_mode='HTML')


@bot.message_handler(func=lambda message: message.text == 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
def settings(message: Message) -> None:
    settings_markup = ReplyKeyboardMarkup(resize_keyboard=True)

    settings_markup.add(KeyboardButton('üóí –ó–∞–ø–æ–º–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏'))
    settings_markup.add(KeyboardButton('üá∫üá∏ –í—ã–±–æ—Ä —è–∑—ã–∫–∞'), KeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'))
    settings_markup.add(KeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'))
    bot.send_message(message.chat.id, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=settings_markup)


@bot.message_handler(func=lambda message: message.text == 'üóí –ó–∞–ø–æ–º–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏')
def remember_city(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton('üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'))
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç')
def donate(message: Message) -> None:
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å', url='https://www.donationalerts.com/r/danoff28'))
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç, —Ç–∞–∫ –º—ã —Å—Ç–∞–Ω–µ–º –ª—É—á—à–µ.',
                     reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == '‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º')
def write(message: Message) -> None:
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton('–ù–∞–ø–∏—Å–∞—Ç—å', url='https://forms.gle/4ET9KWs1Vqh3vZo37'))
    bot.send_message(message.chat.id, '–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞—à–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!',
                     reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')
def back_menu(message: Message) -> None:
    menu(message)


@bot.message_handler(func=lambda message: message.text == 'üîô –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
def back_settings(message: Message) -> None:
    settings(message)


@bot.message_handler(func=lambda message: message.text.strip().lower() in langs_names)
def switch_lang(message: Message) -> None:
    bot.send_message(message.chat.id, f'Your language: {message.text.strip().lower()}', reply_markup=back_markup)


@bot.message_handler(content_types=['text'])
def text_type(message: Message) -> None:
    city = message.text.strip().lower()
    result = get(f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_open_weather}&units=metric')
    get_weather(message, result)


@bot.message_handler(content_types=['location'])
def location_type(message: Message) -> None:
    location = message.location
    print(location)
    result = get(f'https://api.openweathermap.org/data/2.5/weather?lon={location.longitude}&lat='
                 f'{location.latitude}&appid={API_open_weather}&units=metric')
    get_weather(message, result)


@bot.message_handler(content_types=['audio', 'document', 'animation', 'game', 'photo', 'sticker', 'video', 'video_note',
                                    'voice', 'contact', 'venue', 'dice', 'invoice', 'successful_payment',
                                    'connected_website', 'poll', 'passport_data', 'web_app_data'])
def unknown_type(message: Message) -> None:
    bot.reply_to(message, '–Ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µüò¢'
                          '\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é',
                 parse_mode='html', reply_markup=back_markup)


bot.polling(none_stop=True)
